class MangoRunOptimalAgent:

    def __init__(self, env):
        self.env = env
        self.optimal_policy = {
            # Format: (agent_pos, ripe_mango1_pos, ripe_mango2_pos): action

            # RIPE MANGOES UP

            ((0, 0), (2, 1), (3, 1)): 1,
            ((1, 0), (2, 1), (3, 1)): 1,
            ((2, 0), (2, 1), (3, 1)): 2,
            ((3, 0), (2, 1), (3, 1)): 2,
            ((4, 0), (2, 1), (3, 1)): 3,
            ((5, 0), (2, 1), (3, 1)): 3,
            ((6, 0), (2, 1), (3, 1)): 3,
            ((6, 1), (2, 1), (3, 1)): 0,
            ((6, 2), (2, 1), (3, 1)): 0,
            ((6, 3), (2, 1), (3, 1)): 0,
            ((6, 4), (2, 1), (3, 1)): 0,
            ((6, 5), (2, 1), (3, 1)): 0,
            ((6, 6), (2, 1), (3, 1)): 0,
            ((5, 6), (2, 1), (3, 1)): 1,
            ((4, 6), (2, 1), (3, 1)): 1,
            ((3, 6), (2, 1), (3, 1)): 3,
            ((2, 6), (2, 1), (3, 1)): 3,
            ((1, 6), (2, 1), (3, 1)): 3,
            ((0, 6), (2, 1), (3, 1)): 0,
            ((0, 5), (2, 1), (3, 1)): 0,
            ((0, 4), (2, 1), (3, 1)): 0,
            ((0, 3), (2, 1), (3, 1)): 0,
            ((0, 2), (2, 1), (3, 1)): 0,
            ((0, 1), (2, 1), (3, 1)): 0,


            ((0, 0), (3, 1), (4, 1)): 1,
            ((1, 0), (3, 1), (4, 1)): 1,
            ((2, 0), (3, 1), (4, 1)): 1,
            ((3, 0), (3, 1), (4, 1)): 2,
            ((4, 0), (3, 1), (4, 1)): 2,
            ((5, 0), (3, 1), (4, 1)): 3,
            ((6, 0), (3, 1), (4, 1)): 3,
            ((6, 1), (3, 1), (4, 1)): 0,
            ((6, 2), (3, 1), (4, 1)): 0,
            ((6, 3), (3, 1), (4, 1)): 0,
            ((6, 4), (3, 1), (4, 1)): 0,
            ((6, 5), (3, 1), (4, 1)): 0,
            ((6, 6), (3, 1), (4, 1)): 0,
            ((5, 6), (3, 1), (4, 1)): 1,
            ((4, 6), (3, 1), (4, 1)): 1,
            ((3, 6), (3, 1), (4, 1)): 1,
            ((2, 6), (3, 1), (4, 1)): 3,
            ((1, 6), (3, 1), (4, 1)): 3,
            ((0, 6), (3, 1), (4, 1)): 0,
            ((0, 5), (3, 1), (4, 1)): 0,
            ((0, 4), (3, 1), (4, 1)): 0,
            ((0, 3), (3, 1), (4, 1)): 0,
            ((0, 2), (3, 1), (4, 1)): 0,
            ((0, 1), (3, 1), (4, 1)): 0,



            # RIPE MANGOES RIGHT

            ((0, 0), (5, 2), (5, 3)): 1,
            ((1, 0), (5, 2), (5, 3)): 1,
            ((2, 0), (5, 2), (5, 3)): 1,
            ((3, 0), (5, 2), (5, 3)): 1,
            ((4, 0), (5, 2), (5, 3)): 1,
            ((5, 0), (5, 2), (5, 3)): 1,
            ((6, 0), (5, 2), (5, 3)): 2,
            ((6, 1), (5, 2), (5, 3)): 2,
            ((6, 2), (5, 2), (5, 3)): 3,
            ((6, 3), (5, 2), (5, 3)): 3,
            ((6, 4), (5, 2), (5, 3)): 0,
            ((6, 5), (5, 2), (5, 3)): 0,
            ((6, 6), (5, 2), (5, 3)): 0,
            ((5, 6), (5, 2), (5, 3)): 1,
            ((4, 6), (5, 2), (5, 3)): 1,
            ((3, 6), (5, 2), (5, 3)): 1,
            ((2, 6), (5, 2), (5, 3)): 1,
            ((1, 6), (5, 2), (5, 3)): 1,
            ((0, 6), (5, 2), (5, 3)): 1,
            ((0, 5), (5, 2), (5, 3)): 2,
            ((0, 4), (5, 2), (5, 3)): 2,
            ((0, 3), (5, 2), (5, 3)): 0,
            ((0, 2), (5, 2), (5, 3)): 0,
            ((0, 1), (5, 2), (5, 3)): 0,


            ((0, 0), (5, 3), (5, 4)): 1,
            ((1, 0), (5, 3), (5, 4)): 1,
            ((2, 0), (5, 3), (5, 4)): 1,
            ((3, 0), (5, 3), (5, 4)): 1,
            ((4, 0), (5, 3), (5, 4)): 1,
            ((5, 0), (5, 3), (5, 4)): 1,
            ((6, 0), (5, 3), (5, 4)): 2,
            ((6, 1), (5, 3), (5, 4)): 2,
            ((6, 2), (5, 3), (5, 4)): 2,
            ((6, 3), (5, 3), (5, 4)): 3,
            ((6, 4), (5, 3), (5, 4)): 3,
            ((6, 5), (5, 3), (5, 4)): 0,
            ((6, 6), (5, 3), (5, 4)): 0,
            ((5, 6), (5, 3), (5, 4)): 1,
            ((4, 6), (5, 3), (5, 4)): 1,
            ((3, 6), (5, 3), (5, 4)): 1,
            ((2, 6), (5, 3), (5, 4)): 1,
            ((1, 6), (5, 3), (5, 4)): 1,
            ((0, 6), (5, 3), (5, 4)): 1,
            ((0, 5), (5, 3), (5, 4)): 2,
            ((0, 4), (5, 3), (5, 4)): 2,
            ((0, 3), (5, 3), (5, 4)): 2,
            ((0, 2), (5, 3), (5, 4)): 0,
            ((0, 1), (5, 3), (5, 4)): 0,


            # RIPE MANGOES DOWN

            ((0, 0), (2, 5), (3, 5)): 2,
            ((1, 0), (2, 5), (3, 5)): 3,
            ((2, 0), (2, 5), (3, 5)): 3,
            ((3, 0), (2, 5), (3, 5)): 3,
            ((4, 0), (2, 5), (3, 5)): 1,
            ((5, 0), (2, 5), (3, 5)): 1,
            ((6, 0), (2, 5), (3, 5)): 2,
            ((6, 1), (2, 5), (3, 5)): 2,
            ((6, 2), (2, 5), (3, 5)): 2,
            ((6, 3), (2, 5), (3, 5)): 2,
            ((6, 4), (2, 5), (3, 5)): 2,
            ((6, 5), (2, 5), (3, 5)): 2,
            ((6, 6), (2, 5), (3, 5)): 3,
            ((5, 6), (2, 5), (3, 5)): 3,
            ((4, 6), (2, 5), (3, 5)): 3,
            ((3, 6), (2, 5), (3, 5)): 0,
            ((2, 6), (2, 5), (3, 5)): 0,
            ((1, 6), (2, 5), (3, 5)): 1,
            ((0, 6), (2, 5), (3, 5)): 1,
            ((0, 5), (2, 5), (3, 5)): 2,
            ((0, 4), (2, 5), (3, 5)): 2,
            ((0, 3), (2, 5), (3, 5)): 2,
            ((0, 2), (2, 5), (3, 5)): 2,
            ((0, 1), (2, 5), (3, 5)): 2,

            ((0, 0), (3, 5), (4, 5)): 2,
            ((1, 0), (3, 5), (4, 5)): 3,
            ((2, 0), (3, 5), (4, 5)): 3,
            ((3, 0), (3, 5), (4, 5)): 1,
            ((4, 0), (3, 5), (4, 5)): 1,
            ((5, 0), (3, 5), (4, 5)): 1,
            ((6, 0), (3, 5), (4, 5)): 2,
            ((6, 1), (3, 5), (4, 5)): 2,
            ((6, 2), (3, 5), (4, 5)): 2,
            ((6, 3), (3, 5), (4, 5)): 2,
            ((6, 4), (3, 5), (4, 5)): 2,
            ((6, 5), (3, 5), (4, 5)): 2,
            ((6, 6), (3, 5), (4, 5)): 3,
            ((5, 6), (3, 5), (4, 5)): 3,
            ((4, 6), (3, 5), (4, 5)): 0,
            ((3, 6), (3, 5), (4, 5)): 0,
            ((2, 6), (3, 5), (4, 5)): 1,
            ((1, 6), (3, 5), (4, 5)): 1,
            ((0, 6), (3, 5), (4, 5)): 1,
            ((0, 5), (3, 5), (4, 5)): 2,
            ((0, 4), (3, 5), (4, 5)): 2,
            ((0, 3), (3, 5), (4, 5)): 2,
            ((0, 2), (3, 5), (4, 5)): 2,
            ((0, 1), (3, 5), (4, 5)): 2,

            # RIPE MANGOES LEFT

            ((0, 0), (1, 2), (1, 3)): 2,
            ((1, 0), (1, 2), (1, 3)): 3,
            ((2, 0), (1, 2), (1, 3)): 3,
            ((3, 0), (1, 2), (1, 3)): 3,
            ((4, 0), (1, 2), (1, 3)): 3,
            ((5, 0), (1, 2), (1, 3)): 3,
            ((6, 0), (1, 2), (1, 3)): 3,
            ((6, 1), (1, 2), (1, 3)): 0,
            ((6, 2), (1, 2), (1, 3)): 0,
            ((6, 3), (1, 2), (1, 3)): 0,
            ((6, 4), (1, 2), (1, 3)): 2,
            ((6, 5), (1, 2), (1, 3)): 2,
            ((6, 6), (1, 2), (1, 3)): 3,
            ((5, 6), (1, 2), (1, 3)): 3,
            ((4, 6), (1, 2), (1, 3)): 3,
            ((3, 6), (1, 2), (1, 3)): 3,
            ((2, 6), (1, 2), (1, 3)): 3,
            ((1, 6), (1, 2), (1, 3)): 3,
            ((0, 6), (1, 2), (1, 3)): 0,
            ((0, 5), (1, 2), (1, 3)): 0,
            ((0, 4), (1, 2), (1, 3)): 0,
            ((0, 3), (1, 2), (1, 3)): 1,
            ((0, 2), (1, 2), (1, 3)): 1,
            ((0, 1), (1, 2), (1, 3)): 2,


            ((0, 0), (1, 3), (1, 4)): 2,
            ((1, 0), (1, 3), (1, 4)): 3,
            ((2, 0), (1, 3), (1, 4)): 3,
            ((3, 0), (1, 3), (1, 4)): 3,
            ((4, 0), (1, 3), (1, 4)): 3,
            ((5, 0), (1, 3), (1, 4)): 3,
            ((6, 0), (1, 3), (1, 4)): 3,
            ((6, 1), (1, 3), (1, 4)): 0,
            ((6, 2), (1, 3), (1, 4)): 0,
            ((6, 3), (1, 3), (1, 4)): 2,
            ((6, 4), (1, 3), (1, 4)): 2,
            ((6, 5), (1, 3), (1, 4)): 2,
            ((6, 6), (1, 3), (1, 4)): 3,
            ((5, 6), (1, 3), (1, 4)): 3,
            ((4, 6), (1, 3), (1, 4)): 3,
            ((3, 6), (1, 3), (1, 4)): 3,
            ((2, 6), (1, 3), (1, 4)): 3,
            ((1, 6), (1, 3), (1, 4)): 3,
            ((0, 6), (1, 3), (1, 4)): 0,
            ((0, 5), (1, 3), (1, 4)): 0,
            ((0, 4), (1, 3), (1, 4)): 1,
            ((0, 3), (1, 3), (1, 4)): 1,
            ((0, 2), (1, 3), (1, 4)): 2,
            ((0, 1), (1, 3), (1, 4)): 2,

        }

    def test_policy(self, episodes=10, render=False):
        """Test the optimal policy in the environment."""
        success_count = 0
        total_reward = 0

        print(f"\nTesting policy for {episodes} episodes...")
        for episode in range(episodes):
            _, _ = self.env.unwrapped.reset()
            terminated = False
            truncated = False
            episode_reward = 0
            steps = 0

            while not terminated and not truncated:
                agent_entity = self.env.unwrapped.agent
                ripe_mangoes = [self.env.unwrapped.ripe_mango_1,
                                self.env.unwrapped.ripe_mango_2]

                agent_pos = (agent_entity.x, agent_entity.y)
                ripe_positions = sorted([(mango.x, mango.y)
                                         for mango in ripe_mangoes])
                state = (agent_pos, ripe_positions[0], ripe_positions[1])

                action = self.optimal_policy.get(state)
                if action is None:
                    print(f"Warning: No policy for state {state}")
                    break

                observation, reward, terminated, truncated, _ = self.env.unwrapped.step(
                    action)
                episode_reward += reward
                steps += 1

                if render:
                    self.env.unwrapped.render()

            total_reward += episode_reward
            if terminated and episode_reward >= 0.82:  # Successfully got a ripe mango
                success_count += 1
            print(
                f"Episode {episode + 1}: Steps {steps}, Total Reward {episode_reward:.2f}")

        success_rate = (success_count / episodes) * 100
        avg_reward = total_reward / episodes
        print(f"\nOverall Results:")
        print(f"Success Rate: {success_rate:.1f}%")
        print(f"Average Reward: {avg_reward:.2f}")
